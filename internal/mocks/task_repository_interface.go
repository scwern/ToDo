// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	task "ToDo/internal/domain/task"

	uuid "github.com/google/uuid"
)

// TaskRepositoryInterface is an autogenerated mock type for the TaskRepositoryInterface type
type TaskRepositoryInterface struct {
	mock.Mock
}

type TaskRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskRepositoryInterface) EXPECT() *TaskRepositoryInterface_Expecter {
	return &TaskRepositoryInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: t
func (_m *TaskRepositoryInterface) Create(t task.Task) (task.Task, error) {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(task.Task) (task.Task, error)); ok {
		return rf(t)
	}
	if rf, ok := ret.Get(0).(func(task.Task) task.Task); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(task.Task)
	}

	if rf, ok := ret.Get(1).(func(task.Task) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepositoryInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TaskRepositoryInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - t task.Task
func (_e *TaskRepositoryInterface_Expecter) Create(t interface{}) *TaskRepositoryInterface_Create_Call {
	return &TaskRepositoryInterface_Create_Call{Call: _e.mock.On("Create", t)}
}

func (_c *TaskRepositoryInterface_Create_Call) Run(run func(t task.Task)) *TaskRepositoryInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(task.Task))
	})
	return _c
}

func (_c *TaskRepositoryInterface_Create_Call) Return(_a0 task.Task, _a1 error) *TaskRepositoryInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepositoryInterface_Create_Call) RunAndReturn(run func(task.Task) (task.Task, error)) *TaskRepositoryInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: userID
func (_m *TaskRepositoryInterface) GetAll(userID uuid.UUID) ([]task.Task, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]task.Task, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []task.Task); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]task.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepositoryInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type TaskRepositoryInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - userID uuid.UUID
func (_e *TaskRepositoryInterface_Expecter) GetAll(userID interface{}) *TaskRepositoryInterface_GetAll_Call {
	return &TaskRepositoryInterface_GetAll_Call{Call: _e.mock.On("GetAll", userID)}
}

func (_c *TaskRepositoryInterface_GetAll_Call) Run(run func(userID uuid.UUID)) *TaskRepositoryInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryInterface_GetAll_Call) Return(_a0 []task.Task, _a1 error) *TaskRepositoryInterface_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepositoryInterface_GetAll_Call) RunAndReturn(run func(uuid.UUID) ([]task.Task, error)) *TaskRepositoryInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: userID, id
func (_m *TaskRepositoryInterface) GetById(userID uuid.UUID, id uuid.UUID) (*task.Task, error) {
	ret := _m.Called(userID, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (*task.Task, error)); ok {
		return rf(userID, id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) *task.Task); ok {
		r0 = rf(userID, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(userID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepositoryInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type TaskRepositoryInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - userID uuid.UUID
//   - id uuid.UUID
func (_e *TaskRepositoryInterface_Expecter) GetById(userID interface{}, id interface{}) *TaskRepositoryInterface_GetById_Call {
	return &TaskRepositoryInterface_GetById_Call{Call: _e.mock.On("GetById", userID, id)}
}

func (_c *TaskRepositoryInterface_GetById_Call) Run(run func(userID uuid.UUID, id uuid.UUID)) *TaskRepositoryInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryInterface_GetById_Call) Return(_a0 *task.Task, _a1 error) *TaskRepositoryInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepositoryInterface_GetById_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (*task.Task, error)) *TaskRepositoryInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTitle provides a mock function with given fields: userID, title
func (_m *TaskRepositoryInterface) GetByTitle(userID uuid.UUID, title string) (*task.Task, error) {
	ret := _m.Called(userID, title)

	if len(ret) == 0 {
		panic("no return value specified for GetByTitle")
	}

	var r0 *task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) (*task.Task, error)); ok {
		return rf(userID, title)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) *task.Task); ok {
		r0 = rf(userID, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(userID, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepositoryInterface_GetByTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTitle'
type TaskRepositoryInterface_GetByTitle_Call struct {
	*mock.Call
}

// GetByTitle is a helper method to define mock.On call
//   - userID uuid.UUID
//   - title string
func (_e *TaskRepositoryInterface_Expecter) GetByTitle(userID interface{}, title interface{}) *TaskRepositoryInterface_GetByTitle_Call {
	return &TaskRepositoryInterface_GetByTitle_Call{Call: _e.mock.On("GetByTitle", userID, title)}
}

func (_c *TaskRepositoryInterface_GetByTitle_Call) Run(run func(userID uuid.UUID, title string)) *TaskRepositoryInterface_GetByTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *TaskRepositoryInterface_GetByTitle_Call) Return(_a0 *task.Task, _a1 error) *TaskRepositoryInterface_GetByTitle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepositoryInterface_GetByTitle_Call) RunAndReturn(run func(uuid.UUID, string) (*task.Task, error)) *TaskRepositoryInterface_GetByTitle_Call {
	_c.Call.Return(run)
	return _c
}

// MarkDeleted provides a mock function with given fields: id
func (_m *TaskRepositoryInterface) MarkDeleted(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for MarkDeleted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskRepositoryInterface_MarkDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkDeleted'
type TaskRepositoryInterface_MarkDeleted_Call struct {
	*mock.Call
}

// MarkDeleted is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *TaskRepositoryInterface_Expecter) MarkDeleted(id interface{}) *TaskRepositoryInterface_MarkDeleted_Call {
	return &TaskRepositoryInterface_MarkDeleted_Call{Call: _e.mock.On("MarkDeleted", id)}
}

func (_c *TaskRepositoryInterface_MarkDeleted_Call) Run(run func(id uuid.UUID)) *TaskRepositoryInterface_MarkDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryInterface_MarkDeleted_Call) Return(_a0 error) *TaskRepositoryInterface_MarkDeleted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskRepositoryInterface_MarkDeleted_Call) RunAndReturn(run func(uuid.UUID) error) *TaskRepositoryInterface_MarkDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: id, updated
func (_m *TaskRepositoryInterface) Update(id uuid.UUID, updated task.Task) (*task.Task, error) {
	ret := _m.Called(id, updated)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, task.Task) (*task.Task, error)); ok {
		return rf(id, updated)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, task.Task) *task.Task); ok {
		r0 = rf(id, updated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, task.Task) error); ok {
		r1 = rf(id, updated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepositoryInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type TaskRepositoryInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - id uuid.UUID
//   - updated task.Task
func (_e *TaskRepositoryInterface_Expecter) Update(id interface{}, updated interface{}) *TaskRepositoryInterface_Update_Call {
	return &TaskRepositoryInterface_Update_Call{Call: _e.mock.On("Update", id, updated)}
}

func (_c *TaskRepositoryInterface_Update_Call) Run(run func(id uuid.UUID, updated task.Task)) *TaskRepositoryInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(task.Task))
	})
	return _c
}

func (_c *TaskRepositoryInterface_Update_Call) Return(_a0 *task.Task, _a1 error) *TaskRepositoryInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepositoryInterface_Update_Call) RunAndReturn(run func(uuid.UUID, task.Task) (*task.Task, error)) *TaskRepositoryInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskRepositoryInterface creates a new instance of TaskRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepositoryInterface {
	mock := &TaskRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
