basePath: /
definitions:
  ToDo_internal_domain_task.Task:
    type: object
  ToDo_internal_domain_user.User:
    type: object
  ToDo_internal_dto_task.CreateTaskDTO:
    properties:
      description:
        type: string
      status:
        type: integer
      title:
        type: string
    required:
    - description
    - title
    type: object
  ToDo_internal_dto_task.DTO:
    properties:
      description:
        type: string
      id:
        type: string
      status:
        type: integer
      title:
        type: string
      user_id:
        type: string
    type: object
  ToDo_internal_dto_user.CreateUserDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  ToDo_internal_dto_user.DTO:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API для управления задачами
  title: ToDo API
  version: "1.0"
paths:
  /task-service:
    post:
      responses: {}
      summary: Create task service
      tags:
      - Tasks
  /tasks:
    get:
      description: Возвращает список задач для текущего пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ToDo_internal_dto_task.DTO'
            type: array
        "401":
          description: Не авторизован
          schema:
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: object
      security:
      - ApiKeyAuth: []
      summary: Получить все задачи
      tags:
      - Tasks
    post:
      parameters:
      - description: Task data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/ToDo_internal_domain_task.Task'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ToDo_internal_domain_task.Task'
      summary: Create task
      tags:
      - Tasks
  /tasks/{id}:
    delete:
      parameters:
      - description: Task UUID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
      summary: Delete task
      tags:
      - Tasks
    get:
      description: Возвращает задачу по указанному идентификатору
      parameters:
      - description: UUID задачи
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ToDo_internal_dto_task.DTO'
        "400":
          description: Неверный формат UUID
          schema:
            type: object
        "404":
          description: Задача не найдена
          schema:
            type: object
      security:
      - ApiKeyAuth: []
      summary: Получить задачу по ID
      tags:
      - Tasks
    put:
      parameters:
      - description: Task UUID
        in: path
        name: id
        required: true
        type: string
      - description: Updated task data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/ToDo_internal_domain_task.Task'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ToDo_internal_domain_task.Task'
      summary: Update task
      tags:
      - Tasks
  /tasks/{userID}:
    get:
      parameters:
      - description: User UUID
        in: path
        name: userID
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ToDo_internal_domain_task.Task'
            type: array
      summary: Get all tasks
      tags:
      - Tasks
  /tasks/{userID}/{id}:
    get:
      parameters:
      - description: User UUID
        in: path
        name: userID
        required: true
        type: string
      - description: Task UUID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ToDo_internal_domain_task.Task'
      summary: Get task by ID
      tags:
      - Tasks
  /tasks/{userID}/search:
    get:
      parameters:
      - description: User UUID
        in: path
        name: userID
        required: true
        type: string
      - description: Task title
        in: query
        name: title
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ToDo_internal_domain_task.Task'
      summary: Find task by title
      tags:
      - Tasks
  /user-service:
    post:
      responses: {}
      summary: Create user service
      tags:
      - Users
  /users:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ToDo_internal_domain_user.User'
            type: array
      summary: Get all users
      tags:
      - Users
    post:
      parameters:
      - description: User data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/ToDo_internal_domain_user.User'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ToDo_internal_domain_user.User'
      summary: Create user
      tags:
      - Users
  /users/{id}:
    delete:
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
      summary: Delete user
      tags:
      - Users
    get:
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ToDo_internal_domain_user.User'
      summary: Get user by ID
      tags:
      - Users
    put:
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/ToDo_internal_domain_user.User'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ToDo_internal_domain_user.User'
      summary: Update user
      tags:
      - Users
  /users/search:
    get:
      parameters:
      - description: User email
        in: query
        name: email
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ToDo_internal_domain_user.User'
      summary: Find user by email
      tags:
      - Users
swagger: "2.0"
